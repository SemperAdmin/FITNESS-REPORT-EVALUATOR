name: Save User Data to Private Repo

on:
  repository_dispatch:
    types: [save-user-data]

permissions:
  contents: read

jobs:
  save:
    runs-on: ubuntu-latest
    steps:
      - name: Show event payload
        run: |
          echo '${{ toJson(github.event.client_payload) }}' > payload.json
          jq . payload.json || true

      - name: Prepare content and file path
        id: prep
        run: |
          set -e
          # Extract required fields with defaults
          email=$(jq -r '.userData.rsEmail // ""' payload.json)
          name=$(jq -r '.userData.rsName // ""' payload.json)
          rank=$(jq -r '.userData.rsRank // ""' payload.json)
          evals=$(jq -c '.userData.evaluations // []' payload.json)

          if [ -z "$email" ] || [ "$email" = "null" ]; then
            echo "rsEmail is required in client_payload.userData" >&2
            exit 1
          fi

          # users/<emailPrefix>.json (sanitize non-alnum to underscore)
          prefix=$(echo "$email" | cut -d'@' -f1 | tr -c '[:alnum:]' '_' )
          filePath="users/${prefix}.json"

          now=$(date -Iseconds)
          content=$(jq -n \
            --arg now "$now" \
            --arg name "$name" \
            --arg email "$email" \
            --arg rank "$rank" \
            --argjson evaluations "$evals" \
            '{
              version:"1.0",
              lastUpdated:$now,
              profile:{ rsName:$name, rsEmail:$email, rsRank:$rank, totalEvaluations: ($evaluations|length) },
              evaluations:$evaluations,
              metadata:{ exportedAt:$now, exportedBy:$name, applicationVersion:"1.0" }
            }')

          echo "$content" > content.json
          echo "filePath=$filePath" >> $GITHUB_OUTPUT

      - name: Encode content to Base64 (GitHub Contents API requirement)
        id: encode
        run: |
          base64 -w0 content.json > content.b64
          echo "b64=$(cat content.b64)" >> $GITHUB_OUTPUT

      - name: Get existing file SHA (if any)
        id: getsha
        env:
          TOKEN: ${{ secrets.FITREP_DATA }}
        run: |
          set -e
          url="https://api.github.com/repos/SemperAdmin/Fitness-Report-Evaluator-Data/contents/${{ steps.prep.outputs.filePath }}"
          status=$(curl -sS -H "Authorization: Bearer $TOKEN" -H "Accept: application/vnd.github.v3+json" "$url" -o resp.json -w "%{http_code}")
          if [ "$status" = "200" ]; then
            sha=$(jq -r '.sha' resp.json)
            echo "sha=$sha" >> $GITHUB_OUTPUT
          else
            echo "sha=" >> $GITHUB_OUTPUT
          fi

      - name: Create or update file in data repo
        env:
          TOKEN: ${{ secrets.FITREP_DATA }}
        run: |
          set -e
          msg="Update profile via Actions - $(date -Iseconds)"
          if [ -z "${{ steps.getsha.outputs.sha }}" ]; then
            msg="Create profile via Actions - $(date -Iseconds)"
          fi

          body=$(jq -n \
            --arg message "$msg" \
            --arg content "${{ steps.encode.outputs.b64 }}" \
            --arg branch "main" \
            --arg sha "${{ steps.getsha.outputs.sha }}" \
            'if $sha == "" then {message:$message, content:$content, branch:$branch} else {message:$message, content:$content, branch:$branch, sha:$sha} end')

          curl -sS -f -X PUT \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/SemperAdmin/Fitness-Report-Evaluator-Data/contents/${{ steps.prep.outputs.filePath }}" \
            -d "$body"
